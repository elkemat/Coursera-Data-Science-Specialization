?cut2
training$cutCement <- cut2(training$Cement, g = 4)
str(training)
training$index <- 1:length(training)
training$index <- 1:nrow(training)
index
training$index
qplot(CompressiveStrength, index, colour = cutCement, data = training)
qplot(index, CompressiveStrength, colour = cutCement, data = training)
names(training)
training$cutBlastFurnaceSlag <- cut2(training$BlastFurnaceSlag, g = 4)
qplot(index, CompressiveStrength, colour = cutBlastFurnaceSlag, data = training)
training$cutFlyAsh <- cut2(training$FlyAsh, g = 4)
training$cutAge <- cut2(training$Age, g = 4)
qplot(index, CompressiveStrength, colour = cutFlyAsh, data = training)
qplot(index, CompressiveStrength, colour = cutAge, data = training)
plot(training$Superplasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
IL.col.index <- grep("^[Ii][Ll].*", names(training))
IL.col.index
IL.col <- training[, IL.col.index]
IL.col
preProc <- preProcess(IL.col, method = "pca")
preProc
preProc <- preProcess(IL.col, method = "pca", thresh = 0.9)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
training.cols <- training[, c(1, IL.col.index)]
head(training.cols)
nonPCAmod <- train(diagnosis ~ ., data = training.cols, method = "glm")
summary(nonPCAmod$finalModel)
summary(nonPCAmod)
summary(nonPCAmod$finalModel)
confusionMatrix(nonPCAmod)
nonPCAmod <- train(diagnosis ~ ., data = training.cols, method = "glm")
PCAmod <- train(diagnosis ~ ., data = training.cols, preProcess = "pca",
thresh = 0.8)
confusionMatrix(testing$diagnosis, predict(nonPCAmod, testing))
confusionMatrix(testing$diagnosis, predict(PCAmod, testing))
training.cols <- training[, c(1, IL.col.index)]
testing.cols <- testing[, c(1, IL.col.index)]
nonPCAmod <- train(diagnosis ~ ., data = training.cols, method = "glm")
PCAmod <- train(diagnosis ~ ., data = training.cols, preProcess = "pca",
thresh = 0.8)
confusionMatrix(testing$diagnosis, predict(nonPCAmod, testing.cols))
confusionMatrix(testing$diagnosis, predict(PCAmod, testing.cols))
training.cols <- training[, c(1, IL.col.index)]
testing.cols <- testing[, c(1, IL.col.index)]
nonPCAmod <- train(diagnosis ~ ., data = training.cols, method = "glm")
PCAmod <- train(diagnosis ~ ., data = training.cols, method = "glm",
preProcess = "pca", thresh = 0.8)
confusionMatrix(testing$diagnosis, predict(nonPCAmod, testing.cols))
confusionMatrix(testing$diagnosis, predict(PCAmod, testing.cols))
confusionMatrix(testing.cols$diagnosis, predict(nonPCAmod, testing.cols))
confusionMatrix(testing.cols$diagnosis, predict(PCAmod, testing.cols))
names(testing.cols)
confusionMatrix(testing.cols$diagnosis, predict(nonPCAmod, testing.cols[, -1]))
confusionMatrix(testing.cols$diagnosis, predict(PCAmod, testing.cols[, -1]))
confusionMatrix(testing.cols[, 1], predict(nonPCAmod, testing.cols[, -1]))
confusionMatrix(testing.cols[, 1], predict(PCAmod, testing.cols[, -1]))
# Question 4
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
IL.col.index <- grep("^[Ii][Ll].*", names(training))
IL.col <- training[, IL.col.index]
preProc <- preProcess(IL.col, method = "pca", thresh = 0.9)
preProc
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
data(segmentationOriginal)
head(segmentationOriginal)
View(segmentationOriginal)
View(segmentationOriginal)
str(segmentationOriginal)
training <- segmentationOriginal[Case = "Train",]
training <- segmentationOriginal[segmentationOriginal$Case = "Train",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
View(training)
View(training)
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
rpart(Class ~ ., data = segmentationOriginal)
?rpart
rpart(Class ~ ., data = training)
model <- rpart(Class ~ ., data = training)
model <- train(Class ~ ., method = "rpart", data = training)
print(model$finalModel)
newdata1 <- data.frame(TotalIntench2 = 23,000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
predict(model, newdata1, type = "class")
predict(model, newdata1)
predict(model, newdata1, type = raw)
predict(model, newdata1, type = "prop")
predict(model, newdata1, type = "prob")
newdata2 <- data.frame(TotalIntench2 = 50,000,
FiberWidthCh1 = 10,
VarIntenCh4 = 100)
predict(model, newdata2, type = "prob")
View(newdata1)
View(newdata1)
View(newdata2)
View(newdata2)
newdata1 <- data.frame(TotalIntench2 = 23,000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
View(newdata1)
View(newdata1)
newdata3 <- data.frame(TotalIntench2 = 23,000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
newdata1 <- data.frame(TotalIntench2 = 23,000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
?data.frame
View(newdata1)
View(newdata1)
newdata1 <- data.frame(TotalIntench2 = 23000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
predict(model, newdata1, type = "prob")
newdata1 <- data.frame(TotalIntench2 = 23000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
attach(newdata1)
predict(model, newdata1, type = "prob")
newdata1 <- data.frame(TotalIntench2 = 23000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
attach(segmentationOriginal)
predict(model, newdata1, type = "prob")
data(segmentationOriginal)
attach(segmentationOriginal)
str(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
model <- train(Class ~ ., method = "rpart", data = training)
print(model$finalModel)
newdata1 <- data.frame(TotalIntench2 = 23000,
FiberWidthCh1 = 10,
PerimStatusCh1 = 2)
predict(model, newdata1, type = "prob")
newdata2 <- data.frame(TotalIntench2 = 50000,
FiberWidthCh1 = 10,
VarIntenCh4 = 100)
predict(model, newdata2, type = "prob")
install.packages("rattle")
library(rattle)
library(rattle)
install.packages("rattle")
library(rattle)
plot(model$finalModel, uniform = TRUE)
text(model$finalModel, use.n = TRUE, all = TRUE, cex = .8)
print(model$finalModel)
data(olive)
olive = olive[, -1]
View(olive)
View(olive)
model <- train(Area ~ ., data = olive)
model <- train(Area ~ ., method = "rpart", data = olive)
print(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
?tree
?predict
?caret::predict
?caret:predict
??tree
predict(model, newdata = newdata)
View(olive)
View(olive)
str(olive)
olive1 <- olive
olive1$Area <- as.factor(olive1$Area)
str(olive1)
model1 <- train(Area ~ ., method = "rpart", data = olive1)
print(model1$finalModel)
print(model$finalModel)
newdata1 = as.data.frame(t(colMeans(olive1)))
predict(model, newdata = newdata1)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = FALSE)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
str(trainSA)
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
method = "glm", family = "binomial")
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
summary(model)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = FALSE)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
summary(model)
str(SAhead)
str(SAheart)
SAheart$chd <- as.factor(SAheart$chd)
str(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = FALSE)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
summary(model)
missClass = function(values,prediction){sum(((prediction > 0.5)*1)
!= values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
data(SAheart)
#SAheart$chd <- as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = FALSE)
trainSA = SAheart[train, ]
testSA = SAheart[-train, ]
set.seed(13234)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
summary(model)
missClass = function(values,prediction){sum(((prediction > 0.5)*1)
!= values)/length(values)}
missClass(testSA$chd, predict(model, newdata = testSA))
missClass(testSA$chd, predict(model, newdata = trainSA))
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
model <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
?randomForest
randomForest(y ~ ., data = vowel.train)
?varImp
set.seed(33833)
model <- randomForest(y ~ ., data = vowel.train)
varImp(model)
install.packages("gbm")
library(lubridate)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
install.packages("forecast")
install.packages("e1071")
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
mod.rf <- train(y ~ ., data = vowel.train, method = "rf")
mod.gbm <- train(y ~ ., data = vowel.train, method = "gbm")
mod.rf <- train(y ~ ., data = vowel.train, method = "rf")
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod.rf <- train(y ~ ., data = vowel.train, method = "rf")
summary(mod.rf)
mod.gbm <- train(y ~ ., data = vowel.train, method = "gbm")
summary(mod.gbm)
pred.rf <- predict(mod.rf, vowel.test$y)
pred.rf <- predict(mod.rf, vowel.test)
pred.rf
prop.table(pred.rf, vowel.test$y)
table(pred.rf, vowel.test$y)
?accuracy
confusionMatrix(pred.rf, vowel.test$y)
pred.gbm <- predict(mod.gbm, vowel.test)
confusionMatrix(pred.gbm, vowel.test$y)$Accuracy
confusionMatrix(pred.gbm, vowel.test$y)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod.rf <- train(y ~ ., data = vowel.train, method = "rf")
mod.gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred.rf <- predict(mod.rf, vowel.test)
pred.gbm <- predict(mod.gbm, vowel.test)
confusionMatrix(pred.rf, vowel.test$y)
confusionMatrix(pred.gbm, vowel.test$y)
str(vowel.test)
View(vowel.test)
View(vowel.test)
pred.agree <- pred.rf[which(pred.rf != pred.gbm)] = 0
pred.agree <- (pred.rf[which(pred.rf != pred.gbm)] = 0)
?ifelse
preds <- data.frame(pred.rf, pred.gbm, vowel.test$y)
preds[pred.df == pred.gbm, ]
preds[pred.rf == pred.gbm, ]
View(preds)
preds.agree <- preds[pred.rf == pred.gbm, ]
View(preds.agree)
View(preds.agree)
preds.agree <- preds[preds$pred.rf == preds$pred.gbm, ]
mtcars
summary(mtcars$mpg)
plot(mtcars$mpg)
hist(mtcars$mpg)
?hist
hist(mtcars$mpg, density = 1)
plot(density(mtcars$mpg))
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
austrian.cities <- data.frame(name = c("Vienna", "Graz", "Linz", "Salzburg",
"Innsbruck", "Klagenfurt", "Sankt Poelten",
"Bregenz", "Eisenstadt"),
population = c(1840, 273, 198, 148, 126, 97,
52, 28, 13),
lat = c(48.210033, 47.076668, 48.300255,
47.811195, 47.259659, 46.6247222,
48.2, 47.50311, 47.8436),
long = c(16.363449, 15.421371, 14.286057,
13.033229, 11.400375, 14.3052778,
15.63333, 9.7471, 16.5251))
austrian.cities <- leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(austrian.cities$population))
library(leaflet)
austrian.cities <- data.frame(name = c("Vienna", "Graz", "Linz", "Salzburg",
"Innsbruck", "Klagenfurt", "Sankt Poelten",
"Bregenz", "Eisenstadt"),
population = c(1840, 273, 198, 148, 126, 97,
52, 28, 13),
lat = c(48.210033, 47.076668, 48.300255,
47.811195, 47.259659, 46.6247222,
48.2, 47.50311, 47.8436),
lng = c(16.363449, 15.421371, 14.286057,
13.033229, 11.400375, 14.3052778,
15.63333, 9.7471, 16.5251))
austrian.cities <- leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(austrian.cities$population))
austrian.cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(austrian.cities$population))
?addMarkers
?Classes
knitr::opts_chunk$set(echo = FALSE)
install.packages("plotly")
library(plotly)
mtcars
EuStockMarkets
str(EuStockMarkets)
head(EuStockMarkets)
names(EuStockMarkets)
dim(EuStockMarkets)
head(mtcars)
head(cars)
head(mtcars)
head(iris)
head(mtcars)
str(mtcars)
?layout
?plotly$layout
?layout
library(swirl)
install_course("Advanced R Programming")
?runif
temp <- runif(5, 1, 5)
temp
?rnorm
dnorm(1)
qnorm(0.5)
qnorm(1)
qnorm(.99)
qnorm(.01)
pnorm(0)
dnorm(0)
dnorm(2.32)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hello World")
submit()
mad_libs(place = "Vienna", adjective = "big", noun = "success")
submit()
"I" %p% "love" %p% "R!"
?sapply
?array
source('~/.active-rstudio-document')
add2 <- adder_maker(2)
add2(5)
?data.frame
install.packages("purrr")
library(purrr)
source('~/.active-rstudio-document')
install.packages("purrr")
map_chr(c(5,4,3,2,1), function(x){
c("eins", "zwei", "drei", "vier", "fuenf")[x]
})
library(purrr)
map_chr(c(5,4,3,2,1), function(x){
c("eins", "zwei", "drei", "vier", "fuenf")[x]
})
map_chr(c(5,4,3,2,1), function(x){
c("eins", "zwei", "drei", "vier")[x]
})
map_chr(c(5,4,3,2,1), function(x){
c("eins", "xxx", "drei", "vier")[x]
})
map_lgl(c(5,4,3,2,1), function(x){
x > 3
})
map_if(1:5, function(x){
x %% 2 == 0
}, function(y){
y^2
}) %>% unlist()
map_if(1:5, function(x){
x %% 2 == 0
}, function(y){
y^2
})
?unlist
seq(100,500,100)
?letters
rep(1:5, 1:5)
?rep
rep(1:5, 5)
rep(1, 10)
?walk
shiny::runApp('Coursera-courses/Coursera-Data-Science-Specialization/Module9_Developing-Data-Products/CourseProject/MyShinyApp')
runApp('Coursera-courses/Coursera-Data-Science-Specialization/Module9_Developing-Data-Products/CourseProject/MyShinyApp')
